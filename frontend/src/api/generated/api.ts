/* tslint:disable */
/* eslint-disable */
/**
 * Flask API with JWT-Based Authentication
 * Welcome to the Swagger UI documentation site!
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'access_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'token_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthResponse
     */
    'expires_in'?: number;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'public_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponse
     */
    'admin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'registered_on'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'token_expires_in'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Validate access token and return user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGetUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Admin: Generate a new license key and return its value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postKeyGen: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/keygen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authenticate an existing user and return an access token
         * @param {string} email 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLoginUser: async (email: string, password: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('postLoginUser', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('postLoginUser', 'password', password)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add token to blacklist, deauthenticating the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogoutUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new user and return an access token
         * @param {string} email 
         * @param {string} password 
         * @param {string} licenseKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRegisterUser: async (email: string, password: string, licenseKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('postRegisterUser', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('postRegisterUser', 'password', password)
            // verify required parameter 'licenseKey' is not null or undefined
            assertParamExists('postRegisterUser', 'licenseKey', licenseKey)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }
    
            if (licenseKey !== undefined) { 
                localVarFormParams.append('license_key', licenseKey as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Validate access token and return user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGetUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGetUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getGetUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Admin: Generate a new license key and return its value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postKeyGen(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postKeyGen(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postKeyGen']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Authenticate an existing user and return an access token
         * @param {string} email 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLoginUser(email: string, password: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLoginUser(email, password, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postLoginUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add token to blacklist, deauthenticating the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogoutUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogoutUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postLogoutUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register a new user and return an access token
         * @param {string} email 
         * @param {string} password 
         * @param {string} licenseKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRegisterUser(email: string, password: string, licenseKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRegisterUser(email, password, licenseKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postRegisterUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Validate access token and return user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGetUser(options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.getGetUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Admin: Generate a new license key and return its value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postKeyGen(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postKeyGen(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Authenticate an existing user and return an access token
         * @param {string} email 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLoginUser(email: string, password: string, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.postLoginUser(email, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add token to blacklist, deauthenticating the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogoutUser(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postLogoutUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a new user and return an access token
         * @param {string} email 
         * @param {string} password 
         * @param {string} licenseKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRegisterUser(email: string, password: string, licenseKey: string, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.postRegisterUser(email, password, licenseKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Validate access token and return user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getGetUser(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getGetUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Admin: Generate a new license key and return its value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postKeyGen(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postKeyGen(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Authenticate an existing user and return an access token
     * @param {string} email 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postLoginUser(email: string, password: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postLoginUser(email, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add token to blacklist, deauthenticating the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postLogoutUser(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postLogoutUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a new user and return an access token
     * @param {string} email 
     * @param {string} password 
     * @param {string} licenseKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postRegisterUser(email: string, password: string, licenseKey: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postRegisterUser(email, password, licenseKey, options).then((request) => request(this.axios, this.basePath));
    }
}



